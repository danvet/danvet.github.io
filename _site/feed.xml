<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stuff by danvet</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 20 Jun 2016 00:28:00 +0200</pubDate>
    <lastBuildDate>Mon, 20 Jun 2016 00:28:00 +0200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Awesome Atomic Advances</title>
        <description>Also, silly titles. Atomic has taken of for real, right now there&#39;s 17 drivers supporting &lt;a href=&quot;http://blog.ffwll.ch/2015/08/atomic-modesetting-design-overview.html&quot;&gt;atomic modesetting&lt;/a&gt; merged into the DRM subsystem. And still a pile of them each release pending for review&amp;amp;merging. But it&#39;s not just new drivers, there&#39;s also been a steady stream of small improvements over the past year, I think it&#39;s time for an update.&lt;br /&gt;&lt;br /&gt;&lt;a name=&#39;more&#39;&gt;&lt;/a&gt;&lt;br /&gt;It seems small, but a big improvement made over the past few months is that &lt;b&gt;most driver callbacks used by the helper libraries are now optional&lt;/b&gt;. Which means tons and tons of dummy functions and boilerplate code can be removed from drivers, leading to less clutter and easier to understand driver code. Aside: Not all drivers have been decluttered, doing that is great starter project for contributing a first few patches to the DRM subsystem. Many thanks to Boris Brezillion, Noralf Trønnes and many others for making this happen.&lt;br /&gt;&lt;br /&gt;A long standing complaint about the DRM kernel mode setting is that it&#39;s too complicated, especially compared to fbdev when all you have is one dumb framebuffer and nothing else. And yes, in that case there&#39;s really no point in having distinct CRTC, plane and encoder objects, and now finally Noralf Trønnes has volunteered to write a &lt;a href=&quot;https://lists.freedesktop.org/archives/dri-devel/2016-May/107452.html&quot;&gt;&lt;b&gt;helper library for simple display pipelines&lt;/b&gt;&lt;/a&gt; to hide all that complexity from drivers. It&#39;s not yet merged but I&#39;m postive it&#39;ll land in 4.8. And it will help to make writing DRM drivers for simple hardware easy and the driver code clutter-free.&lt;br /&gt;&lt;br /&gt;Another piece many dumb framebuffer drivers need is support for manually uploading new contents to the screen. Often on this simple panels there&#39;s no point in doing page-flipping of entire buffers since a real render engine is nowhere to be seen. And the panels are often behind a really slow bus, making full screen uploads to expensive. Instead it&#39;s all done by directly drawing into the frontbuffer, and then telling the driver what changed so that it can shovel the new bits over the bus to the panel. DRM has full support for this through a dirty interface and IOCTL, and legacy fbdev also has some support for this. But the fbdev emulation helpers in DRM never wired these two bits together, forcing drivers to all type their own boilerplate. Noralf has fixed this by implementing &lt;a href=&quot;https://cgit.freedesktop.org/drm-intel/commit/?id=eaa434defaca1781fb2932c685289b610aeb8b4b&quot;&gt;&lt;b&gt;fbdev deferred I/O support for the DRM fbdev helpers&lt;/b&gt;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;A related improvement is &lt;a href=&quot;https://cgit.freedesktop.org/drm-intel/commit/?id=a03fdcb1863297481a4b817c2a759cafcbdfa0ae&quot;&gt;&lt;b&gt;generic support to disable the fbdev emulation&lt;/b&gt;&lt;/a&gt; from Archit Tajena, both through a Kconfig option and a module option. Most distributions still expect fbdev to work for the boot splash, recovery console and emergency logging. But some, like ChromeOS, are entirely legacy-free and don&#39;t need any of this. Thus far every DRM driver had to add implement support for fbdev emulation and disabling it optionally itself. Now that&#39;s all done in the library using dummy stub functions in the disabled case, again simplifying driver code.&lt;br /&gt;&lt;br /&gt;Somehow most ARM-SoC display drivers start out their system suspend/resume support with a dumb register save/restore. I guess because with simple hardware that works, and regmap provides it almost for free. And then everyone learns the lessons why the atomic modeset helpers have a very strict state transition model the hard way: Display hardware gets upset extremely easily when things are done in the wrong order, or without the required delays, obeying the depencies between components and much more. Dumb register restoring does none of that. To fix this Thierry Redding implemented &lt;a href=&quot;https://cgit.freedesktop.org/drm-intel/commit/?id=1494276000db789c6d2acd85747be4707051c801&quot;&gt;&lt;b&gt;suspend/resume helpers for atomic drivers&lt;/b&gt;&lt;/a&gt;. Unfortunately not many drivers use this support yet, which is again a nice opportunity to get a kernel patch merged if you have the hardware for such a driver.&lt;br /&gt;&lt;br /&gt;Another big gap in the original atomic infrastructure that&#39;s finally getting close is &lt;a href=&quot;http://thread.gmane.org/gmane.comp.freedesktop.xorg.drivers.intel/91023&quot;&gt;&lt;b&gt;generic support for nonblocking commits&lt;/b&gt;&lt;/a&gt;. The tricky part there is getting the depency tracking between commits on different display parts right, and I secretly hoped that with a few examples it would be easier to implement something that&#39;s useful for most drivers. With 17 examples I&#39;ve finally run out of excuse to postpone this, after more than 1 year.&lt;br /&gt;&lt;br /&gt;But even more important than making the code prettier for atomic drivers and removing boilerplate with better helpers and libraries is in my opinion explaing it all, and making sure all drivers work the same. Over the past few months there&#39;s been massive &lt;a href=&quot;https://01.org/linuxgraphics/gfx-docs/drm/&quot;&gt;&lt;b&gt;improvements to the driver interface documentation&lt;/b&gt;&lt;/a&gt;. One of the big items there is certainly &lt;a href=&quot;https://01.org/linuxgraphics/gfx-docs/drm/gpu.html#modeset-helper-reference-for-common-vtables&quot;&gt;documenting the expected behaviour, return codes and special cases of every driver callback&lt;/a&gt;. But there is lots more improved than just this example, so go and read them! And of course, when you spot an inconsistency or typo, just send in a patch to fix it. And it&#39;s not just contents, but also presentation: Hopefully in 4.8 Jani Nikula&#39;s &lt;a href=&quot;https://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1158589.html&quot;&gt;sphinx-based documentation toolchain&lt;/a&gt; - the above links are already generated using that for a peek at all the new pretty.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The flip side is testing, and on that front Collabora&#39;s effort to&amp;nbsp; convert all the kernel mode-setting tests in &lt;a href=&quot;https://cgit.freedesktop.org/xorg/app/intel-gpu-tools/&quot;&gt;intel-gpu-tools&lt;/a&gt; to be generic and useful on any DRM is progressing nicely. For a bit more details read up on &lt;a href=&quot;http://blog.tomeuvizoso.net/2016/04/validating-changes-to-kms-drivers-with.html&quot;&gt;Tomeu Vizoso&#39;s blog on validating changes to KMS drivers&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Finally it&#39;s not all improvements to make it easier to write great drivers, there&#39;s also some new feature work. Lionel Landwerlin added new atomic properties to &lt;a href=&quot;https://cgit.freedesktop.org/drm-intel/commit/?id=5488dc16fde74595a40c5d20ae52d978313f0b4e&quot;&gt;&lt;b&gt;implement color management support&lt;/b&gt;&lt;/a&gt;. And there&#39;s work on-going to implement Z-order and blending properties, and lots more, but that&#39;s not yet ready for merging.
</description>
        <pubDate>Mon, 06 Jun 2016 11:41:00 +0200</pubDate>
        <link>http://yourdomain.com/2016/06/06/awesome-atomic-advances.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/06/06/awesome-atomic-advances.html</guid>
        
        <category>In-Depth Tech</category>
        
        
      </item>
    
      <item>
        <title>On Getting Patches Merged</title>
        <description>In some project there&#39;s an awesome process to handle newcomer&#39;s contributions - autobuilder picks up your pull and runs full CI on it, coding style checkers automatically do basic review, and the functional review load is also at least all assigned with tooling too.&lt;br /&gt;&lt;br /&gt;Then there&#39;s projects where utter chaos and ad-hoc process reign, like the Linux kernel or the X.org community, and it&#39;s much harder for new folks to get their foot into the door. Of course there&#39;s documentation trying to bridge that gap, tools like get_maintainers.pl to figure out whom to ping, but that&#39;s kinda the details. In the end you need someone from the inside to care about what you&#39;re doing and guide you through the maze the first few times.&lt;br /&gt;&lt;br /&gt;I&#39;ve been pinged about this a few times recently on IRC, so I figured I&#39;ll type up my recommended best practices.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;a name=&#39;more&#39;&gt;&lt;/a&gt;The crucial bit is that such unstructured developer communities run entirely on mutual trust, and patches get reviewed through a market of favours as in &quot;I review yours and you review my patches&quot;. As a newcomer you have neither. The goal is to build up enough trust and review favours owed to you to get your patches in.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Write a few small, simple patches in related areas. When developing your patches you probably had to read some code, documentation, look at testcases, and very likely you spotted a small thing or two that could be improved. Create a patch for each of those and submit them - it&#39;s a great way to test-drive the process and make first contact. Some projects even have tools to hunt for trivial things, e.g. Linux&#39; checkpatch.pl. And as a maintainer I try hard to give everyone a chance to land their first few simple patches fast and try to review&amp;amp;merge them within days.&lt;/li&gt;&lt;li&gt;Talk about what you&#39;re doing on IRC or whatever your project uses for fast&amp;amp;informal communication. Interactive communication is much faster at clearing up initial misunderstandings compared to mailing lists and similar things like pull request discussions. It&#39;s also more scary, but let&#39;s be honest: If the community you want to contribute too isn&#39;t open&amp;amp;friendly, you probably don&#39;t want to stick around anyway. In short, it&#39;s a good community test too.&lt;/li&gt;&lt;li&gt;Go the extra mile: If you create a new interface, helper function or whatever try to roll it out everywhere. Even in code you can&#39;t run yourself (like drivers for other hardware or similar things), or when you&#39;re unsure about how to convert a given piece of code to the new way of doing things. If you have no idea what other piece could benefit from your work, ask around - that&#39;s why you started out with talking on IRC after all. The benefit is that by touching lots of other codes you automatically also gain lots more reviewers who might be interesting in your work and help push it forward.&lt;/li&gt;&lt;li&gt;When submitting your work, or resubmitting revised versions, make sure that everyone who showed interest or might be interested stays informed. There&#39;s various support in tooling for this, but with git and mailing-list patch submissions I just add everyone who ever commented on a patch, or who&#39;s reviewer or maintainer for an area with a Cc: entry to the patch itself. That way I never forget to add them when resubmitting.&lt;/li&gt;&lt;li&gt;Doing all this you will have learned a lot - apply that knowledge by reviewing patches from people who commented on your work in related areas. That will also fill your review favours kitty and help get your patches landed.&lt;/li&gt;&lt;li&gt;If the project uses the maintainer model for committing with no  commit rights for regular contributors, don&#39;t ask the maintainer for  review, they&#39;re generally overloaded. Instead fan out and try to find  the subject expert, like you would do in a project where all regular  contributors have commit rights.&lt;/li&gt;&lt;li&gt;Most important of all: Don&#39;t just sit&amp;amp;wait around scared and hope your patches will magically land. They won&#39;t, not because they&#39;re bad but simply because people are busy, and your patches are forever lost in the chaos after just a week or two. Hence ping after a few days about the status, but don&#39;t ask when the patches will land, but instead what you can do to move them forward. It&#39;s a cheap trick, but it helps to elicit useful responses, at least in my experience.&lt;/li&gt;&lt;li&gt;And equally important: Don&#39;t fall into the imposter syndrome gap or end up blaming yourself when things are a bit bumpy at first - it&#39;s just plain hard to figure out undocumented rules of projects who run on chaos and personal relationships. But do try to improve the documentation once you&#39;ve managed all the pitfalls, to make it easier for the next new person. After all, as the most recent new contributor, you&#39;re now the residential expert on this topic!&lt;/li&gt;&lt;/ul&gt;And finally your patches have landed, and in the process you&#39;ve learned to know a few interesting people. And getting to know new folks is in my opinion really what open source and community is all about. Congrats, and all the best for the next step in your journey!&lt;br /&gt;&lt;br /&gt;And finally for the flip side, there&#39;s a great write up from &lt;a href=&quot;http://sarah.thesharps.us/2014/09/01/the-gentle-art-of-patch-review/&quot;&gt;Sarah Sharp about doing review&lt;/a&gt;, which applies especially to reviewing newcomer&#39;s patches.</description>
        <pubDate>Sat, 04 Jun 2016 13:11:00 +0200</pubDate>
        <link>http://yourdomain.com/2016/06/04/on-getting-patches-merged.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/06/04/on-getting-patches-merged.html</guid>
        
        <category>Maintainer-Stuff</category>
        
        
      </item>
    
      <item>
        <title>Neat drm/i915 Stuff for 4.7</title>
        <description>The &lt;a href=&quot;http://blog.ffwll.ch/2016/03/neat-drmi915-stuff-for-46.html&quot;&gt;4.6 release&lt;/a&gt; is almost out of the door, it&#39;s time to look at what&#39;s in store for 4.7.&lt;br /&gt;&lt;a name=&#39;more&#39;&gt;&lt;/a&gt;Let&#39;s first look at the epic saga called atomic support. In 4.7 the &lt;b&gt;atomic watermark update support for Ironlake through Broadwell&lt;/b&gt; from Matt Roper, Ville Syrjälä and others finally landed. This took about 3 attempts to get merged because there&#39;s lots of small little corner cases that caused regressions each time around, but it&#39;s finally done. And it&#39;s an absolutely key piece for atomic support, since Intel hardware does not support atomic updates of the watermark settings for the display fetch fifos. And if those values are wrong tearings and other ugly things will result. We still need corresponding support for other platforms, but this is a really big step. But that&#39;s not the only atomic work: Maarten Lankhorst made the &lt;b&gt;hardware state checker atomic&lt;/b&gt;, and there&#39;s been tons of smaller things all over to move the driver towards the shiny new.&lt;br /&gt;&lt;br /&gt;Another big feature on the display side is &lt;b&gt;color management&lt;/b&gt;, implemented by Lionel Landwerlin, and then fixes to make it fully &lt;b&gt;atomic&lt;/b&gt; from Maarten. Color management aims for more accurate reproduction of a well definied color space on panels, using a de-gamma table, then a color matrix, and finally a gamma table.&lt;br /&gt;&lt;br /&gt;For platform enabling the big thing is support for &lt;b&gt;DSI panels on Broxton&lt;/b&gt; from Jani Nikula and Ramalingam C. One fallout from this effort is the &lt;b&gt;cleaned up VBT parsing &lt;/b&gt;code, done by Jani. There&#39;s now a clean split between parsing the different VBT versions on all the various platforms, now neatly consolidated, and using that information in different places within the driver. Ville also hooked up &lt;b&gt;upscaling/panel fitting for DSI panels&lt;/b&gt; on all platforms.&lt;br /&gt;&lt;br /&gt;Looking more at driver internals Ander Conselvan de Oliviera&lt;b&gt; &lt;/b&gt;and Ville &lt;b&gt;refactored the entire display PLL &lt;/b&gt;code on all platforms, with the goal to reuse it in the DP detection code for upfront link training. This is needed to detect the link configuration in certain situations like USB type C connectors. Shubhangi Shrivastava &lt;b&gt;reworked the DP detection&lt;/b&gt; code itself, again to prep for these features. Still on pure display topics Ville &lt;b&gt;fixed lots of underrun issues&lt;/b&gt; to appease our CI on lots of platforms. Together with the atomic watermark updates this should shut up one of the largest sources of noise in our test results.&lt;br /&gt;&lt;br /&gt;Moving on to power management work the big thing is &lt;b&gt;lots of small fixes for the runtime PM support&lt;/b&gt; all over the place from Imre Deak and Ville, with a big focus on the Broxton platform. And while we talk features affecting the entire driver: Imre&lt;b&gt; added fault injection to the driver load paths&lt;/b&gt; so that we can start to exercise all that code in an automated way.&lt;br /&gt;&lt;br /&gt;Finally looking at the render/GEM side of the driver the short summary is that Tvrtko Ursulin and Chris Wilson worked the code all over the place: A cleanup up and &lt;b&gt;tuned forcewake handling &lt;/b&gt;code from Tvrtko, f&lt;b&gt;ixes for more userptr corner cases &lt;/b&gt;from Chris, a new &lt;b&gt;notifier to handle vmap exhaustion&lt;/b&gt; and assorted polish in the related shrinker code, &lt;b&gt;cleaned up and fixed handling of gpu reset corner cases&lt;/b&gt;, &lt;b&gt;fixes for context related hard hangs&lt;/b&gt; on Sandybridge and Ironlake, large-scale renaming of parameters and structures to realign old code with the newish execlist hardware mode, the list goes on. And finally a rather big piece, and one which causes some trouble, is all the work to &lt;b&gt;speed up the execlist code&lt;/b&gt;, with a big focusing on &lt;b&gt;reducing interrupt handling overhead&lt;/b&gt;. This was done by moving the expensive parts of execlist interrupt handling into a tasklet. Unfortunately that uncovered some bugs in our interrupt handling on Braswell, so Ville jumped in and fixed it all up, plus of course removed some cruft and applied some nice polish.&lt;br /&gt;&lt;br /&gt;Other work in the GT are are &lt;b&gt;gpu hang fixes for Skylake GT3 and GT4&lt;/b&gt; configurations from Mika Kuoppala. Mika also provided patches to i&lt;b&gt;mprove the edram handling&lt;/b&gt; on those same chips. Alex Dai and Dave Gordon kept working on making GuC ready for prime time, but not yet there. And Peter Antoine improved the MOCS support to work on all engines.&lt;br /&gt;&lt;br /&gt;And of course there&#39;s been tons of smaller improvements, bugfixes, cleanups and refactorings all over the place, as usual.</description>
        <pubDate>Tue, 10 May 2016 23:52:00 +0200</pubDate>
        <link>http://yourdomain.com/2016/05/10/neat-drmi915-stuff-for-47.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/05/10/neat-drmi915-stuff-for-47.html</guid>
        
        
      </item>
    
      <item>
        <title>X.Org Foundation Election Results</title>
        <description>Two questions were up for voting, 4 seats on the Board of Directors and approval of the amended By-Laws to join SPI.&lt;br /&gt;&lt;br /&gt;Congratulations to our reelected and new board members Egbert Eich, Alex Deucher, Keith Packard and Bryce Harrington. Thanks a lot to Lucas Stach for running. And also big thanks to our outgoing board member Matt Dew, who stepped down for personal reasons.&lt;br /&gt;&lt;br /&gt;On the bylaw changes and merging with SPI, 61 out of 65 active members voted, with 54 voting yes, 4 no and 3 abstained. Which means we&#39;re well past the 2/3rd quorum for bylaw changes, and everything&#39;s green now to proceed with the plan to join SPI!</description>
        <pubDate>Thu, 28 Apr 2016 08:37:00 +0200</pubDate>
        <link>http://yourdomain.com/2016/04/28/xorg-foundation-election-results.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/28/xorg-foundation-election-results.html</guid>
        
        <category>X.org</category>
        
        
      </item>
    
      <item>
        <title>Should the X.org Foundation join SPI? Vote Now!</title>
        <description>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-0xdeyuFfML0/VxcuHa6le1I/AAAAAAAAAY0/szB2xu42-qwWGLZpwIitJYZkDKiNrgBsQCKgB/s1600/vote_now.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-0xdeyuFfML0/VxcuHa6le1I/AAAAAAAAAY0/szB2xu42-qwWGLZpwIitJYZkDKiNrgBsQCKgB/s320/vote_now.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://keithp.com/blogs/x.org-election/&quot;&gt;In&lt;/a&gt; &lt;a href=&quot;https://phoronix.com/scan.php?page=news_item&amp;amp;px=Xorg-2016-Elections-Start&quot;&gt;case&lt;/a&gt; you &lt;a href=&quot;http://blog.ffwll.ch/2016/04/xorg-foundation-election-vote-now.html?showComment=1461317453899#c781631829836255757&quot;&gt;missed&lt;/a&gt; &lt;a href=&quot;http://www.xorg-foundation.org/wiki/BoardOfDirectors/Elections/2016/&quot;&gt;it&lt;/a&gt;: Please vote now on &lt;a href=&quot;https://members.x.org/login.php&quot;&gt;https://members.x.org/login.php&lt;/a&gt;!</description>
        <pubDate>Sun, 24 Apr 2016 11:14:00 +0200</pubDate>
        <link>http://yourdomain.com/2016/04/24/should-xorg-foundation-join-spi-vote-now.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/24/should-xorg-foundation-join-spi-vote-now.html</guid>
        
        
      </item>
    
      <item>
        <title>X.org Foundation Election - Vote Now!</title>
        <description>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-0xdeyuFfML0/VxcuHa6le1I/AAAAAAAAAYw/qho0p0LtZH0jfQGQ5L01ZoedVmL9fKaFQCLcB/s1600/vote_now.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://1.bp.blogspot.com/-0xdeyuFfML0/VxcuHa6le1I/AAAAAAAAAYw/qho0p0LtZH0jfQGQ5L01ZoedVmL9fKaFQCLcB/s320/vote_now.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;It&#39;s election season in X.org land, and it matters: Besides new board seats we&#39;re also voting on bylaw changes and whether to join SPI or not.&lt;br /&gt;&lt;br /&gt;Personally, and as the secretary of the board I&#39;m very much in favour of joining SPI. It will allow us to offload all the boring bits of running a foundation, and those are also all the bits we tend to struggle with. And that would give the board more time to do things that actually matter and help the community. And all that for a really reasonable price - running our own legal entity isn&#39;t free, and not really worth it for our small budget mostly consisting of travel sponsoring and the occasional internship.&lt;br /&gt;&lt;br /&gt;And bylaw changes need a qualified supermajority of all members, every vote counts and not voting essentially means voting no. Hence please vote, and please vote even when you don&#39;t want to join - this is our second attempt and I&#39;d really like to see a clear verdict from our members, one way or the other.&lt;br /&gt;&lt;br /&gt;Thanks.&lt;br /&gt;&lt;br /&gt;Voting closes by&amp;nbsp; &lt;strong&gt;             Apr 26  23:59 UTC&lt;/strong&gt;, but please don&#39;t cut it short, it&#39;s a computer that decides when it&#39;s over ...&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Wed, 20 Apr 2016 09:24:00 +0200</pubDate>
        <link>http://yourdomain.com/2016/04/20/xorg-foundation-election-vote-now.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/20/xorg-foundation-election-vote-now.html</guid>
        
        <category>X.org</category>
        
        
      </item>
    
      <item>
        <title>Neat drm/i915 stuff for 4.6</title>
        <description>The &lt;a href=&quot;http://blog.ffwll.ch/2016/01/neat-drmi915-stuff-for-45.html&quot;&gt;4.5 release &lt;/a&gt;is close, it&#39;s time to look at what&#39;s in store for the next kernel&#39;s merge window in the Intel graphics driver.&lt;br /&gt;&lt;a name=&#39;more&#39;&gt;&lt;/a&gt;&lt;br /&gt;Headline features for sure are that &lt;b&gt;FBC and PSR are enabled by default&lt;/b&gt;. And this time around I&#39;m really hopeful that it will stick, since Paulo&amp;amp;Rodrigo have done a stellar job hunting down all the corner cases, writing testcases for them all and in general making sure we have a really solid foundation for display power saving features. There&#39;s still some oddball cornercases, which means it&#39;s not yet enabled everywhere and on all platforms, but like I said: Looking really good, and the culmination of over 1 year of effort to get the code infrastructure fixed up and solid.&lt;br /&gt;&lt;br /&gt;Another project &lt;b&gt;ongoing is atomic display support&lt;/b&gt;, with again lots of work from Maarten and Matt and others to move things forward. Specifically Maarten adapted the load detect logic to atomic and removed a pile of legacy structures no longer needed in preparation of next steps. Matt continued to work on atomic display fifo watermark updates. Another area that has seen a &lt;b&gt;lot of work in the background is runtime PM&lt;/b&gt;. Mika, Imre and Ville have massively improved the debugging infrastructure we have to track down rare bugs in our power status tracking code. They also merged lots of fixes in this area. Unfortunately we&#39;re not yet at a point where we can enable overall runtime PM for the device by default.&lt;br /&gt;&lt;br /&gt;More on the feature side is &lt;b&gt;pixel clock limit checks &lt;/b&gt;for all outputs and platforms from Mika Kahola. This is related to the work to also enable dynamic display clock scaling on Gen9, but that part is still being worked on. Ville worked a lot on how &lt;b&gt;offsets and alignment are handled for display planes&lt;/b&gt;, all in preparation to support rotated multi-planar formats like NV12. Again a feature where a lot of hard work is required to make the final patch to enable it all look really simple.&lt;br /&gt;&lt;br /&gt;On the plain hardware and platform enabling side Jani implemented support for version 3 of the &lt;b&gt;VBT DSI descriptions&lt;/b&gt;, which should extend DSI panel support to all current hardware. Which includes the Surface 3.&lt;br /&gt;&lt;br /&gt;Finally on the &lt;b&gt;GEM side there have been mostly small fixes&lt;/b&gt; and imrpovements under the hood. Tvrtko decoupled the internal engine representation from the userspace ABI defines. He also restructed the CS irq handler code, and started to fix up some locking issues in execlist. Chris tracked down some coherency issues in the execlist interrupt handler. Dave Gordon finally started to somewhat untangle the execlist initialization logic and some of the confusion in how all the different software structures connect.&lt;br /&gt;&lt;br /&gt;One real feature work by Alex Dai though was enabled &lt;b&gt;ADS for GuC&lt;/b&gt;, which is some means to hand additional metadata to the GuC firmware scheduler. But since GuC based command submission isn&#39;t enabled yet, this doesn&#39;t have a direct impact.&lt;br /&gt;&lt;br /&gt;And of course there have been bugfixes all over the place, as usual.</description>
        <pubDate>Thu, 10 Mar 2016 10:51:00 +0100</pubDate>
        <link>http://yourdomain.com/2016/03/10/neat-drmi915-stuff-for-46.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/03/10/neat-drmi915-stuff-for-46.html</guid>
        
        <category>Kernel RelNotes</category>
        
        
      </item>
    
      <item>
        <title>ARM kernel cross compiling</title>
        <description>I do a lot of cross driver subsytem refactorings, and DRM has lots of drivers that only run on ARM. Which means I routinely break a leg or arm since at least in the past cross-compiling was somehow always super painful. But I&#39;ve just learned (thanks to Daniel Stone) that cross-compiling this stuff has become real easy, so here&#39;s my handy script for this. This assumes Debian, but the difference is just in installing a different cross-compiler toolchain.&lt;br /&gt;&lt;br /&gt;First get the tooling:&lt;br /&gt;&lt;br /&gt;&lt;code&gt;$ sudo apt-get install gcc-arm-linux-gnueabihf&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&amp;nbsp;&lt;/code&gt;&lt;br /&gt;Then create another git checkout. I prefer the recently merged worktree support, since with that all your branches and remotes transparently work in the new checkout, too.&lt;br /&gt;&lt;br /&gt;&lt;code&gt;~/kernel/src/ $ git worktree add ../armhf HEAD&lt;/code&gt;&lt;br /&gt;&lt;code&gt;&amp;nbsp;&lt;/code&gt;&lt;br /&gt;With that we&#39;re all set up. For building any &lt;code&gt;$branch&lt;/code&gt; wrap the following lines into a scrip:&lt;br /&gt;&lt;br /&gt;&lt;code&gt;$ cd ~/kernel/armhf&lt;br /&gt;$ git checkout --detach $branch&lt;br /&gt;$ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- multi_v7_defconfig zImage modules&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;I&#39;m using --detach to avoid complaints from the git worktree code that I&#39;ve checked out a branch already in the main repo. Note: Never accidentally run plain make in the ARM build directory - mixing up architectures seriously confuses the kernel build system.</description>
        <pubDate>Wed, 10 Feb 2016 17:01:00 +0100</pubDate>
        <link>http://yourdomain.com/2016/02/10/arm-kernel-cross-compiling.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/02/10/arm-kernel-cross-compiling.html</guid>
        
        <category>Maintainer-Stuff</category>
        
        
      </item>
    
      <item>
        <title>LCA Geelong: Embrace the Atomic Display Age</title>
        <description>Back from another awesome linux.conf.au, still the best general Linux conference even the second time around. I&#39;ve also done a talk about all the &lt;a href=&quot;https://linux.conf.au/schedule/30132/view_talk?day=wednesday&quot;&gt;shiny new atomic display support&lt;/a&gt; in the kernel, and the great LCA AV team has &lt;a href=&quot;https://www.youtube.com/watch?v=LjiB_JeDn2M&amp;amp;feature=youtu.be&quot;&gt;uploaded the video&lt;/a&gt; already, and &lt;a href=&quot;https://people.freedesktop.org/~danvet/presentations/lca-2016.pdf&quot;&gt;the slides are here&lt;/a&gt;.</description>
        <pubDate>Mon, 08 Feb 2016 10:32:00 +0100</pubDate>
        <link>http://yourdomain.com/2016/02/08/lca-geelong-embrace-atomic-display-age.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/02/08/lca-geelong-embrace-atomic-display-age.html</guid>
        
        
      </item>
    
      <item>
        <title>VT Switching with Atomic Modeset</title>
        <description>First the title is a slight lie, this really is about compositor switching and not necessarily about using Linux VTs for that. But I hope that the title draws in the right folks and tempts them to read this. Since with atomic there&#39;s a bit a problem if you want to switch between different compositors - maybe you have X running and hack on wayland-mutter, or kwin and mutter or just a DE and a login manager&amp;nbsp; - and expect it to not end up in a modern arts project like &lt;a href=&quot;https://twitter.com/__damien__/status/676741658940186625&quot;&gt;this&lt;/a&gt;.&lt;br /&gt;&lt;a name=&#39;more&#39;&gt;&lt;/a&gt;&lt;br /&gt;Now the trouble with atomic modesetting and switching between different compositors is that atomic display updates are incremental for two reasons:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;First we need to be able to support the legacy KMS interface for existing userspace, and that inteface was only updating parts of the overall display state.&lt;/li&gt;&lt;li&gt;Second we want atomic to be extensible. Which means compositors must be able to only update the properties they understand and leave everything else at a presumably reasonable default values.&lt;/li&gt;&lt;/ul&gt;But if you mix this with a bunch of different compositors which all understand different subsets of all the atomic extensions a driver supports, suddenly the assumption that unhandled values have reasonable settings becomes invalid, and partial updates become a problem. Recently there&#39;s been a discussions on mailing lists and IRC about how to solve this, which ultimately ended in the conclusion that us kernel folks don&#39;t really know what would work best for distros, desktop environments and their compositors. Just going ahead with some new kernel ABI could easily result in a mistake that we have to support for the next 10 years. Therefore this blog post here covers the ideas with come up with to tackle this, just to make it clear that kernel folks are aware of this gap. As soon as userspace people with real clue about this topic run into problems they&#39;re more than welcome on dri-devel@lists.freedesktop.org and then we can figure out what to implement.&lt;br /&gt;&lt;br /&gt;With that out of the way, let&#39;s look at possible solutions.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;FBDEV resets to defaults&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;This is the cheap cop-out that is essentially implemented right now - when switching to a kernel console running on top of the FBDEV emulation KMS drivers can provide, the driver resets atomic properties of new extensions (like rotation, color management, Z-position/alpha/blending, whatever) to hopefully sane defaults. That&#39;s good enough for developers hacking around on different compositors, as long as you remember to VT-switch to a kernel console after things went south.&lt;br /&gt;&lt;br /&gt;But FBDEV is seriously uncool, and a lot of people are working towards removing the kernel&#39;s VT subsytem from modern distros, too. This doesn&#39;t really work everywhere, but it&#39;s kinda the minimal and what we&#39;ll definitely implement. This has also the downside that maybe you only want to restore some properties, while keeping others (since they might be crucial to your setup, for example rotating the screen).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;System compositor restores boot-up state&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;If doing something in the kernel isn&#39;t flexible enough then the usual approach is to do it in userspace. Most systems have some kind of master compositor that&#39;s run in-between user sessions, like a login manager. That system compositor could restore modeset state to something sensible every time it runs again, and user session compositors could then take over that sensible setup as their starting point.&lt;br /&gt;&lt;br /&gt;This has the benefit that more clever and specific stuff like only restoring some properties is easy to implement. This shouldn&#39;t need a hole lot of code since a compositor needs to be able to restore it&#39;s state anyway to allow switching between them.&lt;br /&gt;&lt;br /&gt;But, you&#39;re saying, how can a system compositor know about all the possible and future atomic KMS extensions? Won&#39;t this scheme break the much heralded extensibility? Well the neat trick is that userspace doesn&#39;t need to be able to understand properties to save and restore them - the actual property value transport between kernel and userspace is fully generic. There are a few special cases, like the need to disable outputs that have been unplugged meanwhile, and also some properties with special meaning, like framebuffers. But generic userspace can read out all the metadata, and even if future property types extend e.g. the value range that should still work.&lt;br /&gt;&lt;br /&gt;The downsides of this approach is that it depends upon the global system compositor to do this right, so if that crashes and leaves your display setup in shambles you can&#39;t easily recover any more. This also requires that everyone who cares about switching between different compositors to have such a system compositors.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Interlude: Only launching compositors matters&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The above observation that atomic clients can always faithfully restore a state (even if they don&#39;t understand the semantics of all properties) means that switching compositors itself will always work. The real trouble is making sure that a compositor can start up with a sane enough configuration to be able to successfully get pixels onto the screen. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;New atomic IOCTL kernel flag&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;What might be needed is a way to make this safe state persistent in the kernel. The next option tries that, by adding a new flag to the atomic IOCTL which asks the kernel to start out with an atomic KMS state reset to some default value.&lt;br /&gt;&lt;br /&gt;But again the trouble here is, like with the FBDEV approach, that it&#39;s monolithic, and doesn&#39;t easily allow userspace to control what&#39;s being restored. And again the question is, should things get restored to the boot-up state (and which boot-up state - something equivalent to what FBDEV emulation would pick, what the firmware would have picked or a mix), or maybe reset values (set everything to unrotated) is better?&lt;br /&gt;&lt;br /&gt;On top of that most often compositors don&#39;t want to reset state at all, to be able to smoothly take over the display configuration from the preceeding KMS client. Users have lost pretty much all appreciation of unsightly flickering that commonly happened in the pre-KMS world when switching compositors.&lt;br /&gt;&lt;br /&gt;Another problem with keeping the boot-up state around is that the kernel then needs to keep a copy of all such state (and some objects like gamma tables are sizeable) around. Just in case there&#39;s userspace around to ask for it.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Use SysRq to reset atomic state&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;A problem with adding a flag to the atomic IOCTL to reset state is that all compositors need to implement support for it, and somehow make a decision for when to employ it. But on most systems compositors shouldn&#39;t completely mess up the atomic state. Most likely that&#39;s after a crash, and then there&#39;s no userspace around anyway to fix things up. Now generally this is, or well should, only be a problem for developers, and a possible solution might be to wire up a SysRq hotkey where the kernel force-resets atomic state to defaults. This would be similar to the FBDEV based solution, except without FBDEV and not tied to VT switching.&lt;br /&gt;&lt;br /&gt;An alternative would be to implement this in the boot-splash service, by sampling boot-up state and providing some command to force-reset to that. But that&#39;s pretty much the system compositor approach, but using the boot splash, and a tool to restore its state from a stored location, as the system compositor.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Expose reset or boot-up state&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;An easy fix to give control back to userspace over what will get restored is to instead expose the boot-up values or the reset values to userspace, through an extension to the GET_PROPERTY IOCTL. But again storing boot-up state in the kernel would be wasteful on systems that will never need it (like Android or CrOS), and exposing reset values somewhat pointless if e.g. you really want your screen rotated, always.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Per-compositor atomic state&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;A slight spiel on all this is to make atomic state per-compositor in the kernel. This sounds a bit like it might help, but on the other hand implementing full state restore isn&#39;t more effort when compositors need to restore their state after a VT switch anyway. This leaves the tricky question of what the inherited state should be when a new compositor starts up: Normally you want the current state, so that the compositor can take over smoothly. Except when that&#39;s a really bad idea because the current state is badly mangled from a different compositor that just crashed.&lt;br /&gt;&lt;br /&gt;Overall lots of different approaches and ideas, but no clear winner. That&#39;s why kernel folks need distro, compositor and desktop people to run into this issue first, to make sure the solution that lands actually solves the right problem. And in a way that suits userspace.&lt;br /&gt;&lt;br /&gt;Thanks to Daniel Stone, Pekka Paalanen and Ville&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;span class=&quot;gD&quot; name=&quot;Ville Syrjälä&quot;&gt; Syrjälä for input on this.&lt;/span&gt;&lt;/span&gt;</description>
        <pubDate>Thu, 14 Jan 2016 14:55:00 +0100</pubDate>
        <link>http://yourdomain.com/2016/01/14/vt-switching-with-atomic-modeset.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/01/14/vt-switching-with-atomic-modeset.html</guid>
        
        <category>In-Depth Tech</category>
        
        
      </item>
    
  </channel>
</rss>
